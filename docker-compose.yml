# Indicates the dockerfile path
build: .

# Run a command
command: bundle exec thin -p 3000

# Name for the container
container_name: my-web-container

# Indicates the DNS server
dns: 8.8.8.8

# Specific a search domain
dns_search: example.com

# Specific an alternate dockerfile
dockerfile: Dockerfile-alternate

# Especify a file with environment variables
env_file: .env

# Add environment variables
environment:
  RACK_ENV: development

# Expose the container port
expose:
  - "3000"
  - "8000"

# Linka container that is not specified in the current docker compose
external_links:
  - redis_1
  - project_db_1:myslc

# Add an entry in the container's etc/hosts
  - "comehost:162.242.195.82"
  - "otherhost:50.31.209.229"

# Indicates an image
image: ubunto:14.04

# Add metadata to container
labels:
  com.example.description: "Accounting webapp"
  com.example.department: "Finance"

# Link containers within the same docker compose
links:
  - db
  - db:database

# Indicates the format of the log to be generated, example: syslog, json-file, etc...
log_driver: syslog

or 

logging:
  driver: syslog

# Indicate where to send the logs
log_opt:
  syslog-address: "tcp://192.168.0.42:123"

or

logging:
  driver: syslog
  options:
    syslog-address: "tcp://192.168.0.42:123"

# Network usage mode
net: "bridge"
net: "host"

# Exposes container and host ports
ports:
  - "3000"
  - "8000:8000"

# Mount volumes in container
volumes:
  # Just specify a path and let the Engine create a volume
  - /var/lib/mysql

  # Specify an absolute path mapping
  - /opt/data:/var/lib/mysql

  # Path on the host, relative to the Compose file
  - ./cache:/tmp/cache

# Mount volumes through another container
volumes_from:
  - service_name
  - service_name:ro
